{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todo.js","Todolist/Todolist.js","serviceWorker.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","addTodo","target","value","onKeyDown","type","placeholder","Component","Todo","this","todo","length","map","item","idx","key","onChange","removeTodo","checked","onClick","delTodo","todoover","defaultChecked","removeTodoover","delTodoover","Todolist","addItem","msg","setState","state","localTodo","localStorage","setItem","JSON","stringify","removeItem","a","removetodo","slice","splice","removeItemover","removetodoover","delItem","delItemover","getItem","parse","localTodoover","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a00e275.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Todoinput extends Component {\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n            this.props.addTodo(e.target.value);\r\n            e.target.value=\"\";\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input onKeyDown={(e)=>this.handleInput(e)} type=\"text\" placeholder=\"添加ToDo\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todo extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行------------{this.props.todo.length}</h1>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={idx}><input type=\"checkbox\" onChange={(e)=>{this.props.removeTodo(idx);e.target.checked=false}}></input>{item}------<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n                <h1>已经完成------------{this.props.todoover.length}</h1>\r\n                <ul>\r\n                    {\r\n                        this.props.todoover.map((item,idx)=><li key={idx}><input type=\"checkbox\" defaultChecked=\"checked\" onChange={(e)=>{this.props.removeTodoover(idx);e.target.checked=true}}></input>{item}------<button onClick={()=>{this.props.delTodoover(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todo from './Todo'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[],\r\n            todoover:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        var localTodo=localStorage.getItem('todo');\r\n        if(localTodo){\r\n            var localTodoarray=JSON.parse(localTodo);\r\n            var todo=localTodoarray;\r\n            this.setState(\r\n                {todo}\r\n            )\r\n        }\r\n        var localTodoover=localStorage.getItem('todoover');\r\n        if(localTodoover){\r\n            var localTodooverarray=JSON.parse(localTodoover);\r\n            var todoover=localTodooverarray;\r\n            this.setState(\r\n                {todoover}\r\n            )\r\n        }\r\n    }\r\n    addItem=(msg)=>{\r\n        this.setState({\r\n            todo:[msg,...this.state.todo]\r\n        })\r\n        var localTodo=[msg,...this.state.todo];\r\n        localStorage.setItem('todo',JSON.stringify(localTodo));\r\n    }\r\n    removeItem=(a)=>{\r\n        var todo=[...this.state.todo];\r\n        var removetodo=todo.slice(a,a+1);\r\n        todo.splice(a,1);\r\n        this.setState(\r\n            {todo}\r\n        )\r\n        this.setState({\r\n            todoover:[removetodo,...this.state.todoover]\r\n        })\r\n        var todoover=[removetodo,...this.state.todoover];\r\n        localStorage.setItem('todo',JSON.stringify(todo));\r\n        localStorage.setItem('todoover',JSON.stringify(todoover));\r\n    }\r\n    removeItemover=(a)=>{\r\n        var todoover=[...this.state.todoover];\r\n        var removetodoover=todoover.slice(a,a+1);\r\n        todoover.splice(a,1);\r\n        this.setState(\r\n            {todoover}\r\n        )\r\n        this.setState({\r\n            todo:[...this.state.todo,removetodoover]\r\n        })\r\n        var todo=[...this.state.todo,removetodoover];\r\n        localStorage.setItem('todo',JSON.stringify(todo));\r\n        localStorage.setItem('todoover',JSON.stringify(todoover));\r\n    }\r\n    delItem=(a)=>{\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState(\r\n            {todo}\r\n        )\r\n        localStorage.setItem('todo',JSON.stringify(todo));\r\n    }\r\n    delItemover=(a)=>{\r\n        var todoover=[...this.state.todoover];\r\n        todoover.splice(a,1);\r\n        this.setState(\r\n            {todoover}\r\n        )\r\n        localStorage.setItem(\"todoover\",JSON.stringify(todoover));\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todo todo={this.state.todo} todoover={this.state.todoover} removeTodo={this.removeItem} removeTodoover={this.removeItemover} delTodo={this.delItem} delTodoover={this.delItemover}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todolist />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}